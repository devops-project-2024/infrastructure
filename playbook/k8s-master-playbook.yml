---
- name: Initialize Kubernetes Master Node
  hosts: master
  become: true
  vars:
    pod_network_cidr: "10.244.0.0/16"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      notify:
        - Set Docker permissions

    - name: Install required dependencies for Kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: latest

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes GPG Key
      ansible.builtin.shell:
        cmd: |
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /"
        create: yes

    - name: Update apt cache after adding Kubernetes repository
      ansible.builtin.apt:
        update_cache: yes

    - name: Update package list and install Kubernetes components
      apt:
        name:
          - kubeadm=1.28.1-1.1
          - kubelet=1.28.1-1.1
          - kubectl=1.28.1-1.1
        update_cache: yes
        state: present

    - name: Initialize the Kubernetes cluster
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes

    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to local file
      delegate_to: localhost
      copy:
        content: "{{ join_command.stdout }}"
        dest: "./join_command.sh"
        mode: '0755'

  handlers:
    - name: Set Docker permissions
      file:
        path: /var/run/docker.sock
        mode: '0666'
